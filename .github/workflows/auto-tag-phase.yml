name: Auto-Tag Phase Releases

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-tag:
    # Only run if PR was merged and title contains "phase" (case-insensitive)
    if: github.event.pull_request.merged == true && contains(toLower(github.event.pull_request.title), 'phase')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Debug: print PR merged/title
        run: |
          echo "merged=${{ toJson(github.event.pull_request.merged) }}"
          echo "title='${{ github.event.pull_request.title }}'"

      - name: Extract phase number from PR title
        id: extract
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          # Extract phase number (e.g., "Phase 12.4" -> "12.4")
          if echo "$PR_TITLE" | grep -qiE 'Phase[[:space:]]+[0-9]+\.[0-9]+'; then
            PHASE_NUM=$(echo "$PR_TITLE" | grep -ioE 'Phase[[:space:]]+[0-9]+\.[0-9]+' | grep -oE '[0-9]+\.[0-9]+')
            TAG_NAME="phase-${PHASE_NUM}"
            echo "phase_number=$PHASE_NUM" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected phase: $PHASE_NUM ‚Üí tag: $TAG_NAME"
          else
            echo "‚ö†Ô∏è No phase number detected in title"
            exit 1
          fi

      - name: Check if tag already exists
        id: check_tag
        run: |
          TAG_NAME="${{ steps.extract.outputs.tag_name }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Tag $TAG_NAME already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $TAG_NAME does not exist yet"
          fi

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          TAG_NAME="${{ steps.extract.outputs.tag_name }}"
          PHASE_NUM="${{ steps.extract.outputs.phase_number }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          TAG_MESSAGE="Phase ${PHASE_NUM} Release

Automatically created from PR #${PR_NUM}: ${PR_TITLE}
Merged at: ${TIMESTAMP}

Co-Authored-By: 02LUKA System <system@02luka.local>"

          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
          git push origin "$TAG_NAME"

          echo "‚úÖ Tag $TAG_NAME created and pushed"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract.outputs.tag_name }}
          release_name: Phase ${{ steps.extract.outputs.phase_number }}
          body: |
            ## Phase ${{ steps.extract.outputs.phase_number }} Release

            **Merged PR**: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
            **Merged by**: @${{ github.event.pull_request.merged_by.login }}
            **Merged at**: ${{ github.event.pull_request.merged_at }}

            ### Changes
            ${{ github.event.pull_request.body }}

            ---

            ü§ñ _Automatically generated by 02LUKA Phase Auto-Tag workflow_
          draft: false
          prerelease: false

      - name: Comment on PR
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.extract.outputs.tag_name }}';
            const phaseNum = '${{ steps.extract.outputs.phase_number }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `‚úÖ **Phase ${phaseNum} tagged successfully!**\n\n` +
                    `üè∑Ô∏è Tag: [\`${tagName}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})\n\n` +
                    `üöÄ Release created automatically.`
            });