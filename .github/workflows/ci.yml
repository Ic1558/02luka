name: CI
on:
  push:
  pull_request:
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Validate MCP example
        run: |
          jq empty .cursor/mcp.example.json
          test -f .cursor/mcp.example.json || echo ".cursor/mcp.example.json not present (expected on CI)"
      - name: Validate MCP paths
        run: |
          BAD=.cursor/mcp.
          EXT=json
          PAT="$BAD$EXT"
          if command -v rg >/dev/null 2>&1; then rg -n --fixed-strings "$PAT" --hidden --glob "!*example*" || true; else grep -Rna --exclude-dir=.git --exclude="*example*" "$PAT" . || true; fi
          echo done
      - name: Validate structure (Option C)
        run: |
          make validate-zones
          make proof || true
  ops-gate:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check ops atomic summary
        # Note: OPS_ATOMIC_URL and OPS_ATOMIC_TOKEN must be configured as repository secrets
        # OPS_GATE_OVERRIDE should be set as a repository variable (set to "1" to skip gate)
        # The script below handles missing/empty values gracefully
        env:
          OPS_ATOMIC_URL: ${{ secrets.OPS_ATOMIC_URL }}
          OPS_ATOMIC_TOKEN: ${{ secrets.OPS_ATOMIC_TOKEN }}
          OPS_GATE_OVERRIDE: ${{ vars.OPS_GATE_OVERRIDE }}
        run: |
          set -euo pipefail

          if [ "${OPS_GATE_OVERRIDE}" = "1" ]; then
            echo "Override active: skipping ops-gate check."
            exit 0
          fi

          if [ -z "${OPS_ATOMIC_URL}" ]; then
            echo "OPS_ATOMIC_URL secret is not configured." >&2
            exit 1
          fi

          summary_url="${OPS_ATOMIC_URL%/}/api/reports/summary"
          tmp_file="$(mktemp)"

          cleanup() {
            rm -f "$tmp_file"
          }
          trap cleanup EXIT

          curl_args=(--silent --show-error --fail "$summary_url")
          if [ -n "${OPS_ATOMIC_TOKEN}" ]; then
            curl_args=(--silent --show-error --fail \
              -H "Authorization: Bearer ${OPS_ATOMIC_TOKEN}" \
              "$summary_url")
          fi

          curl "${curl_args[@]}" >"$tmp_file"

          fails_count=$(jq '(.fails // []) | length' "$tmp_file")

          if [ "$fails_count" -gt 0 ]; then
            echo "Ops gate blocked: ${fails_count} failure(s) reported." >&2
            jq -r '(.fails // [])[] | \
              if type == "object" then (.name // .title // .id // tostring)
              else tostring end | "- \(.)"' "$tmp_file" >&2
            exit 1
          fi

          echo "Ops gate clear: no failures reported."
      - name: Phase 5/6/7 smoke (local)
        run: |
          set -euo pipefail
          bash scripts/smoke.sh
          node agents/reflection/self_review.cjs --days=7 >/dev/null
  docs-links:
    name: docs cross-link check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure both docs exist
        run: |
          test -f docs/CODEX_MASTER_READINESS.md
          test -f docs/CODEX_DEV_RUNBOOK.md
      - name: Check cross-links (master → runbook)
        run: |
          grep -Ei 'CODEX[_ -]DEV[_ -]RUNBOOK' docs/CODEX_MASTER_READINESS.md
      - name: Check cross-links (runbook → readiness)
        run: |
          grep -Ei 'CODEX[_ -]MASTER[_ -]READINESS' docs/CODEX_DEV_RUNBOOK.md
      - name: Fail if either link section is empty
        run: |
          for f in docs/CODEX_MASTER_READINESS.md docs/CODEX_DEV_RUNBOOK.md; do
            refs=$(grep -Eo '\(.*CODEX_.*\.MD.*\)|\[.*CODEX_.*\]' -i "$f" | wc -l | tr -d ' ')
            if [ "$refs" -lt 1 ]; then
              echo "Missing cross-link in $f"; exit 1
            fi
          done
