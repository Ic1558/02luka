name: CI
on:
  push:
  pull_request:
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Validate MCP example
        run: |
          jq empty .cursor/mcp.example.json
          test -f .cursor/mcp.example.json || echo ".cursor/mcp.example.json not present (expected on CI)"
      - name: Validate MCP paths
        run: |
          BAD=.cursor/mcp.
          EXT=json
          PAT="$BAD$EXT"
          if command -v rg >/dev/null 2>&1; then rg -n --fixed-strings "$PAT" --hidden --glob "!*example*" || true; else grep -Rna --exclude-dir=.git --exclude="*example*" "$PAT" . || true; fi
          echo done
      - name: Validate structure (Option C)
        run: |
          make validate-zones
          make proof || true
  gateways:
    name: Preview gateway smoke tests
    runs-on: ubuntu-latest
    if: >-
      ${{
        (github.event_name != 'pull_request' ||
         github.event.pull_request.head.repo.full_name == github.repository) &&
        secrets.PREVIEW_AGENTS_GATEWAY_URL != '' &&
        secrets.PREVIEW_AI_GATEWAY_URL != '' &&
        secrets.CLOUDFLARE_AI_GATEWAY_TOKEN != ''
      }}
    env:
      AGENTS_GATEWAY_URL: ${{ secrets.PREVIEW_AGENTS_GATEWAY_URL }}
      AI_GATEWAY_URL: ${{ secrets.PREVIEW_AI_GATEWAY_URL }}
      CLOUDFLARE_AI_GATEWAY_TOKEN: ${{ secrets.CLOUDFLARE_AI_GATEWAY_TOKEN }}
    steps:
      - name: Ensure gateway environment is configured
        run: |
          set -euo pipefail
          missing=0
          for var in AGENTS_GATEWAY_URL AI_GATEWAY_URL CLOUDFLARE_AI_GATEWAY_TOKEN; do
            if [ -z "${!var:-}" ]; then
              echo "::error::${var} is not configured for CI."
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi
      - name: Mask Cloudflare AI token
        run: echo "::add-mask::${CLOUDFLARE_AI_GATEWAY_TOKEN}"
      - name: Check agents gateway health endpoint
        run: |
          set -euo pipefail
          curl --fail --silent --show-error "${AGENTS_GATEWAY_URL%/}/api/agents/health" \
            | python - <<'PY'
import json, sys
try:
    data = json.load(sys.stdin)
except json.JSONDecodeError as exc:  # noqa: F841
    raise SystemExit("Agents health endpoint did not return JSON")

status = str(data.get("status", "")).lower()
if status not in {"ok", "healthy"}:
    raise SystemExit(f"Agents gateway health check failed: status={status!r}")
print("Agents gateway is healthy")
PY
      - name: Smoke test AI completion endpoint
        run: |
          set -euo pipefail
          curl --fail --silent --show-error \
            -X POST \
            -H "Authorization: Bearer ${CLOUDFLARE_AI_GATEWAY_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"model":"@cf/meta/llama-3.1-8b-instruct","messages":[{"role":"user","content":"health check"}]}' \
            "${AI_GATEWAY_URL%/}/api/ai/complete" \
            | python - <<'PY'
import json, sys
try:
    data = json.load(sys.stdin)
except json.JSONDecodeError as exc:  # noqa: F841
    raise SystemExit("AI completion endpoint did not return JSON")

response = data.get("result") or data.get("response") or {}
if not response:
    raise SystemExit("AI completion endpoint returned empty payload")
print("AI completion gateway responded")
PY
