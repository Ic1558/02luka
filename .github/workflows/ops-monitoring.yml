name: OPS Monitoring

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:  # Manual trigger
  # push:
  #   branches: [main]  # Uncomment to run on push to main

jobs:
  ops-atomic:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Install Node.js dependencies
        run: |
          npm install
          cd boss-api
          npm install

      - name: Start mock services (CI environment)
        run: |
          # Start minimal API server for health checks
          cd boss-api
          node server.cjs &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV

          # Wait for API to be ready
          for i in {1..30}; do
            if curl -s http://127.0.0.1:4000/healthz >/dev/null 2>&1; then
              echo "API server ready"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 2
          done

      - name: Run OPS Atomic
        env:
          DISCORD_WEBHOOK_DEFAULT: ${{ secrets.DISCORD_WEBHOOK_DEFAULT }}
          DISCORD_WEBHOOK_MAP: ${{ secrets.DISCORD_WEBHOOK_MAP }}
          REPORTBOT_REPORT_BASE_URL: ${{ secrets.REPORTBOT_REPORT_BASE_URL }}
          GITHUB_ACTIONS: true
          CI: true
          REPO_ROOT: ${{ github.workspace }}
        run: |
          chmod +x ./run/ops_atomic.sh
          ./run/ops_atomic.sh || true

          # Capture exit code but don't fail immediately
          OPS_EXIT=$?
          echo "OPS_EXIT=$OPS_EXIT" >> $GITHUB_ENV

      - name: Parse OPS summary
        id: ops_summary
        run: |
          if [ -f g/reports/OPS_SUMMARY.json ]; then
            STATUS=$(jq -r '.status // "unknown"' g/reports/OPS_SUMMARY.json)
            PASS=$(jq -r '.pass // 0' g/reports/OPS_SUMMARY.json)
            WARN=$(jq -r '.warn // 0' g/reports/OPS_SUMMARY.json)
            FAIL=$(jq -r '.fail // 0' g/reports/OPS_SUMMARY.json)

            echo "status=$STATUS" >> $GITHUB_OUTPUT
            echo "pass=$PASS" >> $GITHUB_OUTPUT
            echo "warn=$WARN" >> $GITHUB_OUTPUT
            echo "fail=$FAIL" >> $GITHUB_OUTPUT

            echo "üìä OPS Summary: STATUS=$STATUS PASS=$PASS WARN=$WARN FAIL=$FAIL"
          else
            echo "‚ö†Ô∏è  OPS_SUMMARY.json not found"
            echo "status=unknown" >> $GITHUB_OUTPUT
            echo "pass=0" >> $GITHUB_OUTPUT
            echo "warn=0" >> $GITHUB_OUTPUT
            echo "fail=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload OPS reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ops-reports-${{ github.run_id }}
          path: |
            g/reports/OPS_ATOMIC_*.md
            g/reports/OPS_SUMMARY.json
          if-no-files-found: warn
          retention-days: 30

      - name: Check OPS status
        if: steps.ops_summary.outputs.status == 'fail'
        run: |
          echo "‚ùå OPS Atomic run failed"
          echo "Status: ${{ steps.ops_summary.outputs.status }}"
          echo "PASS: ${{ steps.ops_summary.outputs.pass }}"
          echo "WARN: ${{ steps.ops_summary.outputs.warn }}"
          echo "FAIL: ${{ steps.ops_summary.outputs.fail }}"

          if [ -f g/reports/OPS_SUMMARY.json ]; then
            echo ""
            echo "Recent alerts:"
            jq -r '.recent[]? | "- [\(.level)] \(.message)"' g/reports/OPS_SUMMARY.json
          fi

          exit 1

      - name: Cleanup
        if: always()
        run: |
          # Stop API server
          if [ -n "${API_PID:-}" ]; then
            kill $API_PID || true
          fi

  notify-discord:
    runs-on: ubuntu-latest
    needs: ops-atomic
    if: always() && (needs.ops-atomic.result == 'failure' || needs.ops-atomic.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OPS reports
        uses: actions/download-artifact@v4
        with:
          name: ops-reports-${{ github.run_id }}
          path: g/reports/

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK_DEFAULT: ${{ secrets.DISCORD_WEBHOOK_DEFAULT }}
          DISCORD_WEBHOOK_MAP: ${{ secrets.DISCORD_WEBHOOK_MAP }}
        if: env.DISCORD_WEBHOOK_DEFAULT != ''
        run: |
          if [ -f g/reports/OPS_SUMMARY.json ]; then
            STATUS=$(jq -r '.status // "unknown"' g/reports/OPS_SUMMARY.json)
            SUMMARY=$(jq -r '.summary // "No summary"' g/reports/OPS_SUMMARY.json)

            # Simple Discord webhook payload
            PAYLOAD=$(cat <<EOF
          {
            "content": "ü§ñ **OPS Monitoring (GitHub Actions)**\n\nStatus: ${STATUS^^}\n${SUMMARY}\n\nRun: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "username": "02LUKA OPS Bot"
          }
          EOF
          )

            curl -X POST "$DISCORD_WEBHOOK_DEFAULT" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" || echo "Discord notification failed (non-blocking)"
          else
            echo "No OPS_SUMMARY.json to send"
          fi
