<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
<<<<<<< HEAD
  <title>Luka Prompt Orchestrator</title>
  <style>
    :root {
      color-scheme: dark;
    }
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body {
      height: 100%;
    }
=======
  <title>Luka - Minimal Working Version</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    body {
      font-family: system-ui, -apple-system, sans-serif;
      background: #0a0a0a;
      color: #fafafa;
<<<<<<< HEAD
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      padding: env(safe-area-inset-top) env(safe-area-inset-right) calc(env(safe-area-inset-bottom)) env(safe-area-inset-left);
=======
      height: 100vh;
      display: flex;
      flex-direction: column;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    header {
      border-bottom: 1px solid #262626;
      padding: 12px 16px;
      display: flex;
      align-items: center;
<<<<<<< HEAD
      gap: 16px;
      background: rgba(10, 10, 10, 0.95);
      position: sticky;
      top: env(safe-area-inset-top);
      z-index: 20;
    }
    .logo {
      width: 32px;
      height: 32px;
=======
      gap: 12px;
      position: relative;
      z-index: 2;
    }
    .logo {
      width: 32px; height: 32px;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      background: #3b82f6;
      border-radius: 8px;
      display: grid;
      place-items: center;
      font-weight: bold;
    }
    .status {
<<<<<<< HEAD
      color: #a3a3a3;
      font-size: 14px;
    }
    .tools {
      margin-left: auto;
      display: flex;
      align-items: center;
      gap: 12px;
=======
      flex: 1;
      color: #a3a3a3;
      font-size: 14px;
    }
    .tool-actions {
      display: flex;
      align-items: center;
      gap: 8px;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    .messages {
      flex: 1;
      overflow-y: auto;
      padding: 24px;
      display: flex;
      flex-direction: column;
      gap: 16px;
<<<<<<< HEAD
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
=======
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    .message {
      display: flex;
      gap: 12px;
<<<<<<< HEAD
      max-width: min(600px, 100%);
      width: 100%;
=======
      max-width: 600px;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    .message.user {
      align-self: flex-end;
      flex-direction: row-reverse;
    }
    .avatar {
<<<<<<< HEAD
      width: 32px;
      height: 32px;
=======
      width: 32px; height: 32px;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      background: #141414;
      border-radius: 8px;
      display: grid;
      place-items: center;
      font-size: 14px;
    }
    .message.user .avatar { background: #3b82f6; }
    .content {
      background: #141414;
      padding: 12px 16px;
      border-radius: 12px;
      font-size: 14px;
      line-height: 1.5;
      white-space: pre-wrap;
      word-break: break-word;
    }
    .message.user .content { background: #3b82f6; }
    .input-area {
      padding: 16px;
      border-top: 1px solid #262626;
<<<<<<< HEAD
      background: rgba(10, 10, 10, 0.95);
      position: sticky;
      bottom: 0;
      padding-bottom: calc(16px + env(safe-area-inset-bottom));
      backdrop-filter: blur(12px);
=======
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    .input-wrapper {
      background: #141414;
      border: 1px solid #262626;
      border-radius: 12px;
      padding: 12px;
      display: flex;
      gap: 12px;
      align-items: flex-end;
<<<<<<< HEAD
      width: 100%;
=======
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    #messageInput {
      flex: 1;
      background: transparent;
      border: none;
      outline: none;
      color: #fafafa;
      font-size: 14px;
      resize: none;
      min-height: 20px;
<<<<<<< HEAD
      max-height: 160px;
      font-family: inherit;
      line-height: 1.5;
      padding-right: 8px;
    }
    #sendButton {
      width: 40px;
      height: 40px;
=======
      max-height: 100px;
      font-family: inherit;
    }
    #sendButton {
      width: 32px; height: 32px;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      background: #3b82f6;
      border: none;
      border-radius: 8px;
      color: white;
      cursor: pointer;
      display: grid;
      place-items: center;
      transition: opacity 0.2s;
    }
    #sendButton:hover:not(:disabled) { opacity: 0.9; }
    #sendButton:disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }
<<<<<<< HEAD
    select,
    button.tool-button {
=======
    select, .tool-button {
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      background: #141414;
      border: 1px solid #262626;
      color: #fafafa;
      padding: 6px 12px;
      border-radius: 6px;
      outline: none;
      cursor: pointer;
      font-size: 12px;
<<<<<<< HEAD
      transition: border-color 0.2s;
    }
    button.tool-button:hover,
    select:hover {
      border-color: #3b82f6;
    }
    .prompt-library-panel {
      position: fixed;
      top: 72px;
      right: 24px;
      width: 360px;
      max-width: calc(100% - 48px);
      background: #111827;
      border: 1px solid #1f2937;
      border-radius: 12px;
      box-shadow: 0 16px 40px rgba(0, 0, 0, 0.35);
      display: none;
      flex-direction: column;
      overflow: hidden;
      z-index: 10;
=======
    }
<<<<<<<< HEAD:index.html

    .toolbar {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .button {
      background: #1f2937;
      border: 1px solid #262626;
      color: #fafafa;
      padding: 6px 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 12px;
      transition: background 0.2s ease, opacity 0.2s ease;
    }

    .button:hover:not(:disabled) {
      background: #1e40af;
    }

    .button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .button.active {
      background: #3b82f6;
      color: #0a0a0a;
    }

    .optimizer-panel {
      display: none;
      flex-direction: column;
      gap: 12px;
      background: #141414;
      border: 1px solid #262626;
      margin: 16px;
      margin-top: 12px;
      padding: 16px;
      border-radius: 16px;
    }

    .optimizer-panel.active {
      display: flex;
    }

    .optimizer-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 16px;
    }

    .optimizer-title {
      font-size: 16px;
      font-weight: 600;
    }

    .optimizer-description {
      font-size: 12px;
      color: #a3a3a3;
      margin-top: 4px;
      line-height: 1.5;
    }

    .optimizer-close {
      background: transparent;
      border: none;
      color: #a3a3a3;
      cursor: pointer;
      padding: 4px;
      border-radius: 6px;
    }

    .optimizer-close:hover {
      color: #fafafa;
      background: rgba(59, 130, 246, 0.1);
    }

    .optimizer-body {
      display: flex;
      flex-direction: column;
      gap: 12px;
    }

    .optimizer-textarea {
      background: #0a0a0a;
      border: 1px solid #262626;
      border-radius: 12px;
      color: #fafafa;
      padding: 12px;
      font-size: 13px;
      min-height: 140px;
      resize: vertical;
      line-height: 1.6;
      font-family: inherit;
    }

    .optimizer-controls {
      display: flex;
      flex-wrap: wrap;
      gap: 12px;
      align-items: center;
      justify-content: space-between;
    }

    .optimizer-select {
      display: flex;
      flex-direction: column;
      gap: 6px;
      min-width: 220px;
      flex: 1;
    }

    .optimizer-select label {
      font-size: 12px;
      color: #a3a3a3;
    }

    .optimizer-actions {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }

    .optimizer-output {
      display: none;
      flex-direction: column;
      gap: 8px;
      background: #0a0a0a;
      border: 1px dashed rgba(59, 130, 246, 0.6);
      border-radius: 12px;
      padding: 12px;
    }

    .optimizer-output.active {
      display: flex;
    }

    .optimizer-output-label {
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: #60a5fa;
    }

    .optimizer-output pre {
      margin: 0;
      font-size: 13px;
      line-height: 1.6;
      white-space: pre-wrap;
      word-break: break-word;
    }

    .optimizer-status {
      font-size: 12px;
      color: #a3a3a3;
      min-height: 16px;
    }

    .optimizer-status.success {
      color: #4ade80;
    }

    .optimizer-status.error {
      color: #f87171;
    }

    .optimizer-status.warning {
      color: #facc15;
    }

    .optimizer-status.info {
      color: #38bdf8;
========
    .tool-button {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      border: 1px solid #3b82f6;
      background: rgba(59, 130, 246, 0.12);
      transition: background 0.2s, border-color 0.2s;
    }
    .tool-button svg {
      width: 14px;
      height: 14px;
    }
    .tool-button:hover {
      background: rgba(59, 130, 246, 0.2);
      border-color: #60a5fa;
    }
    .tool-button:focus-visible {
      outline: 2px solid #60a5fa;
      outline-offset: 2px;
    }
    .prompt-library-panel {
      position: absolute;
      top: calc(100% + 10px);
      right: 16px;
      width: min(420px, calc(100vw - 32px));
      max-height: min(400px, calc(100vh - 160px));
      display: none;
      flex-direction: column;
      background: #090909;
      border: 1px solid #262626;
      border-radius: 12px;
      box-shadow: 0 18px 36px rgba(0, 0, 0, 0.45);
      overflow: hidden;
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
    .prompt-library-panel.open {
      display: flex;
    }
    .prompt-library-header {
<<<<<<< HEAD
      padding: 12px 16px;
      border-bottom: 1px solid #1f2937;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .prompt-library-body {
      padding: 16px;
      max-height: 320px;
      overflow-y: auto;
      font-size: 12px;
      line-height: 1.5;
      background: #0f172a;
      white-space: pre-wrap;
    }
    .prompt-library-actions {
      padding: 12px 16px;
      border-top: 1px solid #1f2937;
=======
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 14px 16px;
      border-bottom: 1px solid #1f1f1f;
      background: #0f0f0f;
    }
    .prompt-library-title {
      font-size: 14px;
      font-weight: 600;
      color: #fafafa;
    }
    .prompt-library-close {
      background: transparent;
      border: none;
      color: #a3a3a3;
      width: 28px;
      height: 28px;
      border-radius: 6px;
      cursor: pointer;
      display: grid;
      place-items: center;
      transition: background 0.2s, color 0.2s;
    }
    .prompt-library-close:hover {
      background: rgba(250, 250, 250, 0.08);
      color: #fafafa;
    }
    .prompt-library-body {
      padding: 16px;
      display: flex;
      flex-direction: column;
      gap: 12px;
      overflow: auto;
    }
    .prompt-library-status {
      font-size: 12px;
      color: #d4d4d8;
      line-height: 1.4;
    }
    .prompt-library-content {
      background: #111;
      border: 1px solid #262626;
      border-radius: 8px;
      padding: 12px;
      font-family: 'SFMono-Regular', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      font-size: 12px;
      line-height: 1.5;
      color: #e4e4e7;
      white-space: pre-wrap;
      word-break: break-word;
      max-height: 220px;
      overflow: auto;
    }
    .prompt-library-actions {
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      display: flex;
      justify-content: flex-end;
      gap: 8px;
    }
<<<<<<< HEAD
    button.secondary {
      background: transparent;
      color: #fafafa;
    }
    button.primary {
      background: #3b82f6;
      border: none;
      color: white;
    }

    @media (max-width: 768px) {
      header {
        padding: 12px;
        gap: 12px;
      }
      .status {
        font-size: 12px;
      }
      .tools {
        gap: 8px;
      }
      select,
      button.tool-button {
        font-size: 11px;
        padding: 6px 10px;
      }
      .messages {
        padding: 16px 12px 80px;
      }
      .message {
        gap: 10px;
      }
      .content {
        font-size: 15px;
      }
      .input-area {
        padding: 12px;
      }
      .input-wrapper {
        padding: 10px;
        gap: 10px;
      }
      #messageInput {
        font-size: 15px;
      }
      #sendButton {
        width: 44px;
        height: 44px;
        border-radius: 12px;
      }
      .prompt-library-panel {
        top: 0;
        right: 0;
        left: 0;
        bottom: 0;
        width: 100%;
        max-width: none;
        border-radius: 0;
        border: none;
      }
      .prompt-library-header {
        padding: 16px;
      }
      .prompt-library-body {
        padding: 20px 16px 120px;
        font-size: 14px;
      }
      .prompt-library-actions {
        padding: 16px;
      }
=======
    .prompt-library-actions button {
      padding: 6px 12px;
      border-radius: 6px;
      border: 1px solid #3b82f6;
      background: #3b82f6;
      color: #fff;
      font-size: 12px;
      cursor: pointer;
      transition: opacity 0.2s;
    }
    .prompt-library-actions button.secondary {
      background: rgba(59, 130, 246, 0.12);
      color: #93c5fd;
    }
    .prompt-library-actions button:hover {
      opacity: 0.85;
>>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar:luka.html
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
  </style>
</head>
<body>
  <header>
    <div class="logo">L</div>
<<<<<<< HEAD
    <div>
      <div>Luka Orchestrator</div>
      <div class="status">Connected to local automation</div>
    </div>
    <div class="tools">
      <select id="gateway">
        <option value="auto">Smart Delegate</option>
        <option value="mcp">MCP Docker (5012)</option>
        <option value="mcp_fs">MCP FS (8765)</option>
        <option value="ollama">Ollama (11434)</option>
      </select>
      <button class="tool-button" id="promptLibraryButton" type="button">Prompt Library</button>
      <button class="tool-button" id="openChatWindowButton" type="button">Open Chat Window</button>
    </div>
  </header>

  <div class="prompt-library-panel" id="promptLibraryPanel">
    <div class="prompt-library-header">
      <span>Codex Master Prompt</span>
      <button class="tool-button" id="closePromptLibrary" type="button">Close</button>
    </div>
    <div class="prompt-library-body" id="promptLibraryBody">
      Loading master prompt…
    </div>
    <div class="prompt-library-actions">
      <button class="tool-button secondary" id="copyPromptTemplate" type="button">Copy</button>
      <button class="tool-button primary" id="insertPromptTemplate" type="button">Use Template</button>
    </div>
  </div>
=======
    <div class="status">Connected to 02luka</div>
<<<<<<<< HEAD:index.html
    <div class="toolbar">
========
    <div class="tool-actions">
>>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar:luka.html
      <select id="gateway">
        <option value="http://127.0.0.1:5012">MCP Docker (5012)</option>
        <option value="http://127.0.0.1:8765">MCP FS (8765)</option>
        <option value="http://localhost:11434">Ollama (11434)</option>
      </select>
<<<<<<<< HEAD:index.html
      <button id="promptOptimizerToggle" type="button" class="button">Prompt Optimizer</button>
    </div>
  </header>

  <section id="promptOptimizerPanel" class="optimizer-panel" aria-hidden="true">
    <div class="optimizer-header">
      <div>
        <div class="optimizer-title">Prompt Optimizer</div>
        <div class="optimizer-description">
          Enter a prompt and let Luka reshape it using your selected local AI gateway. Use the master template for best results.
        </div>
      </div>
      <button id="promptOptimizerClose" type="button" class="optimizer-close" aria-label="Close prompt optimizer">
        ✕
      </button>
    </div>
    <div class="optimizer-body">
      <textarea id="optimizerInput" class="optimizer-textarea" placeholder="Describe what you want the AI to accomplish..."></textarea>
      <div class="optimizer-controls">
        <div class="optimizer-select">
          <label for="optimizerGateway">Target gateway</label>
          <select id="optimizerGateway"></select>
        </div>
        <div class="optimizer-actions">
          <button id="optimizerTemplateButton" type="button" class="button">Insert master template</button>
          <button id="optimizerRunButton" type="button" class="button">Optimize prompt</button>
        </div>
      </div>
      <div id="optimizerOutput" class="optimizer-output">
        <div class="optimizer-output-label">Optimized prompt</div>
        <pre id="optimizerResult"></pre>
      </div>
    </div>
    <div id="optimizerStatus" class="optimizer-status"></div>
  </section>
========
      <button class="tool-button" id="promptLibraryButton" type="button" aria-expanded="false">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
          <path d="M4 19.5V4.5C4 4.22386 4.22386 4 4.5 4H15.5L20 8.5V19.5C20 19.7761 19.7761 20 19.5 20H4.5C4.22386 20 4 19.7761 4 19.5Z" />
          <path d="M15 4V8H19" />
          <path d="M8 13H16" />
          <path d="M8 16H12" />
          <path d="M8 10H16" />
        </svg>
        Prompt Library
      </button>
    </div>
  </header>

  <div class="prompt-library-panel" id="promptLibraryPanel" role="dialog" aria-modal="false" aria-labelledby="promptLibraryTitle">
    <div class="prompt-library-header">
      <div class="prompt-library-title" id="promptLibraryTitle">Prompt Library</div>
      <button class="prompt-library-close" id="promptLibraryClose" type="button" aria-label="Close prompt library">&times;</button>
    </div>
    <div class="prompt-library-body">
      <div class="prompt-library-status" id="promptLibraryStatus">Load the master prompt template to quickly start a session.</div>
      <pre class="prompt-library-content" id="promptLibraryContent"></pre>
      <div class="prompt-library-actions">
        <button class="secondary" id="refreshPromptLibrary" type="button">Refresh</button>
        <button id="applyPromptLibrary" type="button">Insert into message</button>
      </div>
    </div>
  </div>
>>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar:luka.html
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar

  <div class="messages" id="messages">
    <div class="message">
      <div class="avatar">L</div>
<<<<<<< HEAD
      <div class="content">Ready. Type a mission and press Send or Enter.</div>
=======
      <div class="content">Ready. Type a message and click Send or press Enter.</div>
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    </div>
  </div>

  <div class="input-area">
    <div class="input-wrapper">
<<<<<<< HEAD
      <textarea id="messageInput" placeholder="Use the master prompt template for best results…" rows="1"></textarea>
      <button id="sendButton" type="button">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" />
=======
      <textarea id="messageInput" placeholder="Type a message..." rows="1"></textarea>
      <button id="sendButton" type="button">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z"/>
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
        </svg>
      </button>
    </div>
  </div>

  <script>
<<<<<<< HEAD
=======
    // Get elements
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const messagesContainer = document.getElementById('messages');
    const gatewaySelect = document.getElementById('gateway');
<<<<<<< HEAD
    const promptLibraryButton = document.getElementById('promptLibraryButton');
    const promptLibraryPanel = document.getElementById('promptLibraryPanel');
    const promptLibraryBody = document.getElementById('promptLibraryBody');
    const closePromptLibrary = document.getElementById('closePromptLibrary');
    const copyPromptTemplate = document.getElementById('copyPromptTemplate');
    const insertPromptTemplate = document.getElementById('insertPromptTemplate');
    const openChatWindowButton = document.getElementById('openChatWindowButton');

    const BACKEND_CHAT_URL = (window.LUKA_BACKEND && window.LUKA_BACKEND.chatEndpoint) || 'http://127.0.0.1:4000/api/chat';
    const TARGET_PROFILES = {
      auto: {
        id: 'auto',
        name: 'Smart Delegate',
        tips: 'Routes to local gateways and selects the strongest answer automatically.'
      },
      mcp: {
        id: 'mcp',
        name: 'MCP Docker',
        tips: 'Start the MCP Gateway on port 5012 before dispatching prompts.'
      },
      mcp_fs: {
        id: 'mcp_fs',
        name: 'MCP FS',
        tips: 'Launch ~/.local/bin/mcp_fs to expose the filesystem MCP server on port 8765.'
      },
      ollama: {
        id: 'ollama',
        name: 'Ollama',
        tips: 'Run `ollama serve` and install a model with `ollama pull <model>`.'
      }
    };

    let masterPromptCache = '';
    let masterPromptFetchPromise = null;
    let isSending = false;

    function togglePromptLibrary(forceOpen) {
      const shouldOpen = forceOpen ?? !promptLibraryPanel.classList.contains('open');
      if (shouldOpen === promptLibraryPanel.classList.contains('open')) {
        return;
      }
      promptLibraryPanel.classList.toggle('open', shouldOpen);
    }

    async function loadMasterPrompt() {
      if (masterPromptCache) {
        promptLibraryBody.textContent = masterPromptCache;
        return masterPromptCache;
      }

      if (!masterPromptFetchPromise) {
        promptLibraryBody.textContent = 'Loading master prompt…';
        masterPromptFetchPromise = (async () => {
          try {
            const response = await fetch('./.codex/templates/master_prompt.md');
            if (!response.ok) {
              throw new Error(`HTTP ${response.status}`);
            }
            const text = await response.text();
            masterPromptCache = text;
            promptLibraryBody.textContent = text;
            return text;
          } catch (error) {
            masterPromptCache = '';
            promptLibraryBody.textContent = 'Unable to load master prompt template. Verify the file exists at .codex/templates/master_prompt.md.';
            throw error;
          } finally {
            masterPromptFetchPromise = null;
          }
        })();
      }

      try {
        return await masterPromptFetchPromise;
      } catch (error) {
        return '';
      }
    }

    function updateSendButton() {
      const hasText = messageInput.value.trim().length > 0;
      sendButton.disabled = !hasText || isSending;
    }

    function setSendingState(state) {
      if (isSending === state) return;
      isSending = state;
      messageInput.readOnly = state;
      if (!state) {
        messageInput.focus();
      }
      updateSendButton();
    }

    async function sendMessage() {
      const text = messageInput.value.trim();
      if (!text || isSending) return;

      setSendingState(true);
      addMessage('user', text);

=======
<<<<<<<< HEAD:index.html
    const optimizerPanel = document.getElementById('promptOptimizerPanel');
    const optimizerToggle = document.getElementById('promptOptimizerToggle');
    const optimizerClose = document.getElementById('promptOptimizerClose');
    const optimizerInput = document.getElementById('optimizerInput');
    const optimizerGatewaySelect = document.getElementById('optimizerGateway');
    const optimizerTemplateButton = document.getElementById('optimizerTemplateButton');
    const optimizerRunButton = document.getElementById('optimizerRunButton');
    const optimizerStatus = document.getElementById('optimizerStatus');
    const optimizerOutput = document.getElementById('optimizerOutput');
    const optimizerResult = document.getElementById('optimizerResult');

    let masterPromptTemplateCache = null;
========
    const promptLibraryButton = document.getElementById('promptLibraryButton');
    const promptLibraryPanel = document.getElementById('promptLibraryPanel');
    const promptLibraryContent = document.getElementById('promptLibraryContent');
    const promptLibraryStatus = document.getElementById('promptLibraryStatus');
    const promptLibraryClose = document.getElementById('promptLibraryClose');
    const refreshPromptLibrary = document.getElementById('refreshPromptLibrary');
    const applyPromptLibrary = document.getElementById('applyPromptLibrary');
    let promptLibraryLoaded = false;
    let promptLibraryLoading = false;
>>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar:luka.html

    const GATEWAY_PROFILES = [
      {
        id: 'mcp',
        match: /5012$/,
        name: 'MCP Docker',
        type: 'mcp',
        tips: 'Use this gateway for local MCP tools and general automation.'
      },
      {
        id: 'fastvlm',
        match: /8765$/,
        name: 'FastVLM Vision',
        type: 'vision',
        tips: 'Great for describing or questioning the contents of an image.'
      },
      {
        id: 'ollama',
        match: /11434$/,
        name: 'Ollama',
        type: 'ollama',
        tips: 'Run local language models with `ollama run <model-name>`.'
      }
    ];

    // Auto-resize textarea
    messageInput.addEventListener('input', () => {
      messageInput.style.height = 'auto';
      messageInput.style.height = Math.min(messageInput.scrollHeight, 100) + 'px';
      updateSendButton();
    });

    if (optimizerInput) {
      optimizerInput.addEventListener('input', () => {
        if (optimizerStatus) {
          optimizerStatus.textContent = '';
          optimizerStatus.className = 'optimizer-status';
        }
      });
    }

    if (optimizerToggle) {
      optimizerToggle.addEventListener('click', () => {
        const isActive = optimizerPanel.classList.toggle('active');
        optimizerPanel.setAttribute('aria-hidden', String(!isActive));
        optimizerToggle.classList.toggle('active', isActive);
        if (isActive) {
          syncOptimizerGateway();
          setTimeout(() => optimizerInput && optimizerInput.focus(), 20);
        }
      });
    }

    if (optimizerClose) {
      optimizerClose.addEventListener('click', () => closeOptimizerPanel());
    }

    if (optimizerTemplateButton) {
      optimizerTemplateButton.addEventListener('click', insertMasterPromptTemplate);
    }

    if (optimizerRunButton) {
      optimizerRunButton.addEventListener('click', optimizePrompt);
    }

    if (gatewaySelect) {
      gatewaySelect.addEventListener('change', () => {
        syncOptimizerGateway();
      });
    }

    window.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && optimizerPanel.classList.contains('active')) {
        closeOptimizerPanel();
      }
    });

    // Update send button state
    function updateSendButton() {
      const hasText = messageInput.value.trim().length > 0;
      sendButton.disabled = !hasText;
    }

<<<<<<<< HEAD:index.html
    function syncOptimizerGateway() {
      if (!optimizerGatewaySelect || !gatewaySelect) return;
      const selected = gatewaySelect.value;
      if (selected && optimizerGatewaySelect.value !== selected) {
        const matchingOption = Array.from(optimizerGatewaySelect.options).find((option) => option.value === selected);
        if (matchingOption) {
          optimizerGatewaySelect.value = selected;
        }
      }
    }

    function closeOptimizerPanel() {
      optimizerPanel.classList.remove('active');
      optimizerPanel.setAttribute('aria-hidden', 'true');
      optimizerToggle && optimizerToggle.classList.remove('active');
    }

    async function insertMasterPromptTemplate() {
      try {
        setOptimizerStatus('Loading master template…', 'info');
        const template = await getMasterPromptTemplate();
        const current = optimizerInput.value.trim();
        optimizerInput.value = current ? `${current}\n\n${template}` : template;
        setOptimizerStatus('Master template inserted into the prompt.', 'success');
      } catch (error) {
        setOptimizerStatus(`Unable to load master template: ${error.message}`, 'error');
      }
    }

    async function getMasterPromptTemplate() {
      if (masterPromptTemplateCache !== null) {
        return masterPromptTemplateCache;
      }

      const response = await fetch('.codex/templates/master_prompt.md', { cache: 'no-cache' });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      const text = await response.text();
      masterPromptTemplateCache = text.trim();
      return masterPromptTemplateCache;
    }

    async function optimizePrompt() {
      if (!optimizerInput) return;

      const prompt = optimizerInput.value.trim();
      if (!prompt) {
        setOptimizerStatus('Enter a prompt to optimize first.', 'warning');
        return;
      }

      const gateway = optimizerGatewaySelect ? optimizerGatewaySelect.value : '';
      if (!gateway) {
        setOptimizerStatus('Select a target gateway before optimizing.', 'warning');
        return;
      }

      setOptimizerLoading(true);
      setOptimizerStatus(`Sending prompt to ${gateway}…`, 'info');

      let template = '';
      try {
        template = await getMasterPromptTemplate();
      } catch (error) {
        console.warn('Unable to load master template:', error);
        setOptimizerStatus(`Continuing without template (load failed: ${error.message}).`, 'warning');
      }

      const requestBody = { prompt, template };
      const candidateEndpoints = ['/optimize-prompt', '/optimize', '/prompt/optimize'];
      let optimizedText = null;
      let lastError = null;

      for (const endpoint of candidateEndpoints) {
        try {
          const url = joinGatewayPath(gateway, endpoint);
          const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
          });

          const payload = await parseResponsePayload(response);
          if (!response.ok) {
            lastError = new Error(typeof payload === 'string' ? payload : `HTTP ${response.status}`);
            continue;
          }

          optimizedText = extractOptimizedPrompt(payload);
          if (optimizedText) {
            break;
          }

          if (typeof payload === 'string') {
            optimizedText = payload;
            break;
          }

          optimizedText = JSON.stringify(payload, null, 2);
          break;
        } catch (error) {
          lastError = error;
        }
      }

      if (optimizedText) {
        optimizerResult.textContent = optimizedText;
        optimizerOutput.classList.add('active');
        setOptimizerStatus('Prompt optimized successfully.', 'success');
      } else {
        optimizerOutput.classList.remove('active');
        const reason = lastError ? lastError.message : 'Unknown error';
        setOptimizerStatus(`Failed to optimize prompt: ${reason}`, 'error');
      }

      setOptimizerLoading(false);
    }

    function extractOptimizedPrompt(payload) {
      if (!payload) return '';
      if (typeof payload === 'string') return payload.trim();
      if (payload.optimizedPrompt) return String(payload.optimizedPrompt).trim();
      if (payload.data && payload.data.optimizedPrompt) return String(payload.data.optimizedPrompt).trim();
      if (payload.result && payload.result.prompt) return String(payload.result.prompt).trim();
      if (Array.isArray(payload.choices)) {
        const first = payload.choices[0];
        if (first && first.message && first.message.content) {
          return String(first.message.content).trim();
        }
      }
      return '';
    }

    function setOptimizerStatus(message, tone) {
      if (!optimizerStatus) return;
      optimizerStatus.textContent = message;
      optimizerStatus.className = 'optimizer-status' + (tone ? ` ${tone}` : '');
    }

    function setOptimizerLoading(isLoading) {
      if (!optimizerRunButton) return;
      optimizerRunButton.disabled = isLoading;
      optimizerRunButton.textContent = isLoading ? 'Optimizing…' : 'Optimize prompt';
========
    function togglePromptLibrary(forceOpen) {
      if (!promptLibraryPanel) return;
      const shouldOpen = forceOpen !== undefined ? forceOpen : !promptLibraryPanel.classList.contains('open');
      promptLibraryPanel.classList.toggle('open', shouldOpen);
      promptLibraryButton?.setAttribute('aria-expanded', shouldOpen ? 'true' : 'false');
      if (shouldOpen) {
        loadPromptLibrary();
      }
    }

    async function loadPromptLibrary(forceReload = false) {
      if (promptLibraryLoading) return;
      if (promptLibraryLoaded && !forceReload) return;
      if (!promptLibraryContent) return;

      promptLibraryLoading = true;
      promptLibraryStatus.textContent = 'Loading master prompt template...';
      promptLibraryContent.textContent = '';

      try {
        const response = await fetch('.codex/templates/master_prompt.md', { cache: 'no-store' });
        if (!response.ok) {
          throw new Error(`Unable to load prompt library (${response.status})`);
        }
        const text = await response.text();
        promptLibraryContent.textContent = text.trim();
        promptLibraryStatus.textContent = 'Template loaded. Insert into the message box to begin using it.';
        promptLibraryLoaded = true;
      } catch (error) {
        promptLibraryStatus.textContent = error.message || 'Failed to load prompt library.';
        promptLibraryLoaded = false;
      } finally {
        promptLibraryLoading = false;
      }
>>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar:luka.html
    }

    // Send message
    async function sendMessage() {
      const text = messageInput.value.trim();
      if (!text) return;

      // Add user message
      addMessage('user', text);

      // Clear input
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      messageInput.value = '';
      messageInput.style.height = 'auto';
      updateSendButton();

<<<<<<< HEAD
      try {
        const formatted = await routeThroughBackend(text);
        addMessage('bot', formatted);
      } catch (err) {
        addMessage('bot', buildBackendFailureMessage(err));
      } finally {
        setSendingState(false);
      }
    }

    function addMessage(type, text) {
      const fragment = document.createDocumentFragment();
=======
      // Add bot response
      try {
        const gateway = gatewaySelect.value;
        const plan = planGatewayAction(text, gateway);
        const actionResult = await executeGatewayAction(plan, gateway);
        addMessage('bot', actionResult);
      } catch (err) {
        addMessage('bot', 'Error: ' + err.message);
      }
    }

    // Add message to UI
    function addMessage(type, text) {
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message' + (type === 'user' ? ' user' : '');

      const avatar = document.createElement('div');
      avatar.className = 'avatar';
      avatar.textContent = type === 'user' ? 'U' : 'L';

      const content = document.createElement('div');
      content.className = 'content';
<<<<<<< HEAD
      content.textContent = (text ?? '').toString();

      messageDiv.appendChild(avatar);
      messageDiv.appendChild(content);
      fragment.appendChild(messageDiv);

      messagesContainer.appendChild(fragment);
      requestAnimationFrame(() => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      });
    }

    messageInput.addEventListener('input', () => {
      messageInput.style.height = 'auto';
      messageInput.style.height = Math.min(messageInput.scrollHeight, 120) + 'px';
      updateSendButton();
    });

    messageInput.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
=======
      content.textContent = text;

      messageDiv.appendChild(avatar);
      messageDiv.appendChild(content);

      messagesContainer.appendChild(messageDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Handle Enter key
    messageInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
        sendMessage();
      }
    });

<<<<<<< HEAD
    sendButton.addEventListener('click', sendMessage);

    promptLibraryButton.addEventListener('click', async () => {
      await loadMasterPrompt();
      togglePromptLibrary(true);
    });

    closePromptLibrary.addEventListener('click', () => {
      togglePromptLibrary(false);
    });

    copyPromptTemplate.addEventListener('click', async () => {
      const text = await loadMasterPrompt();
      if (!text) return;
      try {
        await navigator.clipboard.writeText(text);
        copyPromptTemplate.textContent = 'Copied!';
        setTimeout(() => { copyPromptTemplate.textContent = 'Copy'; }, 1500);
      } catch (error) {
        copyPromptTemplate.textContent = 'Copy failed';
        setTimeout(() => { copyPromptTemplate.textContent = 'Copy'; }, 1500);
      }
    });

    insertPromptTemplate.addEventListener('click', async () => {
      const text = await loadMasterPrompt();
      if (!text) return;
      messageInput.value = text;
      messageInput.dispatchEvent(new Event('input'));
      togglePromptLibrary(false);
      messageInput.focus();
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && promptLibraryPanel.classList.contains('open')) {
        togglePromptLibrary(false);
      }
    });

    // Chat window functionality
    let chatWindow = null;

    openChatWindowButton.addEventListener('click', () => {
      if (chatWindow && !chatWindow.closed) {
        // If chat window is already open, focus it
        chatWindow.focus();
        chatWindow.postMessage({ type: 'open-chat' }, '*');
      } else {
        // Open new chat window
        const windowFeatures = 'width=800,height=600,resizable=yes,scrollbars=yes,status=yes,toolbar=no,menubar=no,location=no';
        chatWindow = window.open('./chat-window.html', 'luka-chat', windowFeatures);
        
        if (chatWindow) {
          chatWindow.addEventListener('load', () => {
            // Sync gateway selection with chat window
            chatWindow.postMessage({ 
              type: 'sync-gateway', 
              gateway: gatewaySelect.value 
            }, '*');
          });
=======
    // Handle button click
    sendButton.addEventListener('click', sendMessage);

    promptLibraryButton?.addEventListener('click', () => togglePromptLibrary());
    promptLibraryClose?.addEventListener('click', () => togglePromptLibrary(false));
    refreshPromptLibrary?.addEventListener('click', () => loadPromptLibrary(true));
    applyPromptLibrary?.addEventListener('click', () => {
      if (!promptLibraryContent) return;
      const template = promptLibraryContent.textContent.trim();
      if (!template) return;
      messageInput.value = template;
      messageInput.dispatchEvent(new Event('input'));
      messageInput.focus();
      togglePromptLibrary(false);
    });

    document.addEventListener('click', (event) => {
      if (!promptLibraryPanel || !promptLibraryButton) return;
      const target = event.target;
      if (!promptLibraryPanel.contains(target) && target !== promptLibraryButton && !promptLibraryButton.contains(target)) {
        if (promptLibraryPanel.classList.contains('open')) {
          togglePromptLibrary(false);
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
        }
      }
    });

<<<<<<< HEAD
    // Listen for messages from chat window
    window.addEventListener('message', (event) => {
      if (event.data.type === 'chat-window-closed') {
        chatWindow = null;
      } else if (event.data.type === 'sync-gateway') {
        // Sync gateway selection from chat window back to main window
        if (event.data.gateway && event.data.gateway !== gatewaySelect.value) {
          gatewaySelect.value = event.data.gateway;
        }
      }
    });

    // Sync gateway changes to chat window
    gatewaySelect.addEventListener('change', () => {
      if (chatWindow && !chatWindow.closed) {
        chatWindow.postMessage({ 
          type: 'sync-gateway', 
          gateway: gatewaySelect.value 
        }, '*');
      }
    });

    updateSendButton();
    messageInput.focus();

    async function routeThroughBackend(text) {
      const targetId = gatewaySelect.value || 'auto';
      const payload = {
        message: text,
        target: targetId
      };

      let response;
      try {
        response = await fetch(BACKEND_CHAT_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
      } catch (networkError) {
        throw new Error('Unable to reach backend. Check your network or server status.');
      }

      if (!response.ok) {
        const errorPayload = await safeParseJson(response);
        const detail = errorPayload && (errorPayload.detail || errorPayload.error);
        throw new Error(detail || `Backend responded with HTTP ${response.status}`);
      }

      const data = await response.json();
      return formatBackendResponse(data, targetId);
    }

    async function safeParseJson(response) {
      try {
        return await response.clone().json();
      } catch (err) {
        return null;
      }
    }

    function formatBackendResponse(payload, targetId) {
      if (!payload || typeof payload !== 'object') {
        return 'Backend returned an empty response.';
      }

      const lines = [];
      const bestText = extractBestText(payload.best);
      if (bestText) {
        lines.push(bestText);
      } else if (payload.summary) {
        lines.push(String(payload.summary).trim());
      }

      if (Array.isArray(payload.results) && payload.results.length) {
        lines.push('');
        lines.push('Delegates:');
        payload.results.forEach((entry) => {
          if (!entry) return;
          const status = entry.status === 'ok'
            ? `ok${entry.latencyMs ? ` (${formatLatency(entry.latencyMs)})` : ''}`
            : `error${entry.error ? `: ${entry.error}` : ''}`;
          lines.push(`- ${entry.name || entry.id}: ${status}`);
        });
      }

      if (!payload.ok) {
        const profile = getTargetProfile(targetId);
        if (profile.tips) {
          lines.push('');
          lines.push(`Tip: ${profile.tips}`);
        }
      }

      return lines.filter(Boolean).join('\n');
    }

    function formatLatency(value) {
      const numeric = Number(value);
      if (!Number.isFinite(numeric)) return '';
      return `${Math.round(numeric)}ms`;
    }

    function getTargetProfile(id) {
      return TARGET_PROFILES[id] || {
        id,
        name: id,
        tips: 'Ensure the selected gateway is running locally.'
      };
    }

    function buildBackendFailureMessage(err) {
      const targetId = gatewaySelect.value || 'auto';
      const profile = getTargetProfile(targetId);
      const normalizedError = err instanceof Error ? err.message : String(err);
      const lines = [
        `Backend error: ${normalizedError}`,
        'Ensure the 02luka backend is running (node boss-api/server.js).'
      ];
      if (profile.tips) {
        lines.push(`Target tip: ${profile.tips}`);
      }
      return lines.join('\n');
    }

    function extractBestText(best) {
      if (!best) return '';
      if (typeof best === 'string') return best.trim();
      if (typeof best === 'object' && typeof best.text === 'string') {
        return best.text.trim();
      }
      return '';
=======
    // Initial state
    updateSendButton();
    messageInput.focus();

    if (optimizerGatewaySelect) {
      if (gatewaySelect && gatewaySelect.options.length) {
        Array.from(gatewaySelect.options).forEach((option) => {
          optimizerGatewaySelect.appendChild(option.cloneNode(true));
        });
      } else {
        GATEWAY_PROFILES.forEach((profile) => {
          const option = document.createElement('option');
          if (profile.id === 'ollama') {
            option.value = 'http://localhost:11434';
          } else if (profile.id === 'mcp') {
            option.value = 'http://127.0.0.1:5012';
          } else if (profile.id === 'fastvlm') {
            option.value = 'http://127.0.0.1:8765';
          } else {
            option.value = typeof profile.match === 'string' ? profile.match : '';
          }
          option.textContent = profile.name;
          optimizerGatewaySelect.appendChild(option);
        });
      }
      syncOptimizerGateway();
    }

    // Log for debugging
    console.log('Luka UI initialized. Elements found:', {
      input: !!messageInput,
      button: !!sendButton,
      messages: !!messagesContainer
    });

    function planGatewayAction(text, gatewayUrl) {
      const normalizedText = text.toLowerCase();
      const profile = getGatewayProfile(gatewayUrl);

      if (/(health|status|ping|alive|running|up|check)/.test(normalizedText)) {
        return {
          summary: `Checking ${profile.name} health...`,
          autoExecute: true,
          endpoint: '/health',
          method: 'GET',
          success: (payload) => formatHealthResponse(payload, profile),
          failure: (payload) => formatFailureMessage(payload)
        };
      }

      if (/(info|capabilities|version|about)/.test(normalizedText)) {
        return {
          summary: `Requesting info from ${profile.name}...`,
          autoExecute: true,
          endpoint: '/info',
          method: 'GET',
          success: (payload) => formatInfoResponse(payload),
          failure: (payload) => formatFailureMessage(payload)
        };
      }

      if (profile.type === 'vision' && /(image|photo|picture|vision|see|describe|look)/.test(normalizedText)) {
        const analyzeUrl = joinGatewayPath(gatewayUrl, '/analyze');
        const batchUrl = joinGatewayPath(gatewayUrl, '/batch-analyze');
        return {
          summary: `${profile.name} can analyze images for you.`,
          autoExecute: false,
          response: [
            `To describe an image, send a POST request to ${analyzeUrl} with form-data fields \`file\` and \`prompt\`.`,
            `Need multiple images? Use ${batchUrl}.`
          ].join('\n')
        };
      }

      if (profile.type === 'ollama' && /(list|show|available).*model/.test(normalizedText)) {
        return {
          summary: `Querying available Ollama models...`,
          autoExecute: true,
          endpoint: '/api/tags',
          method: 'GET',
          success: (payload) => formatOllamaModels(payload),
          failure: (payload) => formatFailureMessage(payload)
        };
      }

      return {
        summary: `No built-in action matched for ${profile.name}.`,
        autoExecute: false,
        response: buildFallbackMessage(profile)
      };
    }

    function executeGatewayAction(plan, gatewayUrl) {
      if (!plan) {
        return Promise.resolve('No plan available for this request.');
      }

      const lines = [plan.summary].filter(Boolean);

      if (!plan.autoExecute) {
        if (plan.response) {
          lines.push(plan.response);
        }
        return Promise.resolve(lines.join('\n'));
      }

      const targetUrl = joinGatewayPath(gatewayUrl, plan.endpoint || '');
      const options = {
        method: plan.method || 'GET',
        headers: Object.assign({}, plan.headers || {})
      };

      if (plan.body !== undefined) {
        const isObjectBody = typeof plan.body === 'object' && !(plan.body instanceof FormData);
        if (isObjectBody && !options.headers['Content-Type']) {
          options.headers['Content-Type'] = 'application/json';
        }
        options.body = isObjectBody ? JSON.stringify(plan.body) : plan.body;
      }

      return fetch(targetUrl, options)
        .then(async (response) => {
          const payload = await parseResponsePayload(response);
          if (!response.ok) {
            const failureMessage = plan.failure
              ? plan.failure(payload, response)
              : `Request failed with status ${response.status}.`;
            lines.push(failureMessage);
            return lines.join('\n');
          }

          const successMessage = plan.success
            ? plan.success(payload, response)
            : formatGenericSuccess(payload);
          lines.push(successMessage);
          return lines.join('\n');
        })
        .catch((error) => {
          const failureMessage = plan.failure
            ? plan.failure(error)
            : `Request error: ${error.message}`;
          lines.push(failureMessage);
          return lines.join('\n');
        });
    }

    function getGatewayProfile(gatewayUrl) {
      const normalized = (gatewayUrl || '').replace(/\/+$/, '');
      const profile = GATEWAY_PROFILES.find((item) =>
        typeof item.match === 'string' ? item.match === normalized : item.match.test(normalized)
      );

      if (profile) {
        return profile;
      }

      return {
        id: 'generic',
        match: null,
        name: normalized || 'Selected gateway',
        type: 'generic',
        tips: 'Connect the gateway and try running a health check to verify it is reachable.'
      };
    }

    function joinGatewayPath(base, path) {
      if (!base) return path;
      const trimmedBase = base.replace(/\/+$/, '');
      const trimmedPath = path.replace(/^\/+/, '');
      return `${trimmedBase}/${trimmedPath}`;
    }

    function parseResponsePayload(response) {
      const contentType = response.headers.get('content-type') || '';
      if (contentType.includes('application/json')) {
        return response.json();
      }
      return response.text();
    }

    function formatHealthResponse(payload, profile) {
      if (!payload) {
        return 'Health endpoint returned an empty response.';
      }

      if (typeof payload === 'string') {
        return payload.slice(0, 400);
      }

      if (typeof payload === 'object') {
        const status = payload.status || payload.state || payload.health || payload.ok;
        const details = Object.entries(payload)
          .filter(([key]) => !['status', 'state', 'health', 'ok'].includes(key))
          .slice(0, 5)
          .map(([key, value]) => `${key}: ${formatValue(value)}`);

        return [
          status ? `Status: ${status}` : 'Health endpoint responded.',
          details.length ? `Details:\n- ${details.join('\n- ')}` : null,
          profile.tips ? `Tip: ${profile.tips}` : null
        ]
          .filter(Boolean)
          .join('\n');
      }

      return 'Health endpoint responded, but the data format was unexpected.';
    }

    function formatInfoResponse(payload) {
      if (!payload) {
        return 'Info endpoint returned an empty response.';
      }

      if (typeof payload === 'string') {
        return payload.slice(0, 400);
      }

      if (typeof payload === 'object') {
        const entries = Object.entries(payload)
          .slice(0, 6)
          .map(([key, value]) => `${key}: ${formatValue(value)}`);
        return entries.length ? entries.join('\n') : 'Info endpoint responded with metadata.';
      }

      return 'Info endpoint responded, but the data format was unexpected.';
    }

    function formatOllamaModels(payload) {
      if (!payload) {
        return 'No models were returned by Ollama. Make sure it is running.';
      }

      const models = Array.isArray(payload.models) ? payload.models : payload;
      if (!Array.isArray(models)) {
        return formatGenericSuccess(payload);
      }

      if (models.length === 0) {
        return 'Ollama returned zero models. Install one with `ollama pull <model>`.';
      }

      const names = models
        .map((item) => (typeof item === 'string' ? item : item && item.name))
        .filter(Boolean);

      if (!names.length) {
        return 'Ollama models endpoint responded, but no names were provided.';
      }

      const displayNames = names.slice(0, 8).join(', ');
      const more = names.length > 8 ? ` ...and ${names.length - 8} more.` : '';
      return `Available models: ${displayNames}${more}`;
    }

    function formatGenericSuccess(payload) {
      if (payload === undefined || payload === null) {
        return 'Request completed with no content.';
      }

      if (typeof payload === 'string') {
        return payload.slice(0, 400);
      }

      return JSON.stringify(payload, null, 2).slice(0, 400);
    }

    function formatFailureMessage(payload) {
      if (!payload) {
        return 'Gateway request failed with no additional details.';
      }

      if (payload instanceof Error) {
        return `Gateway request failed: ${payload.message}`;
      }

      if (typeof payload === 'string') {
        return `Gateway request failed: ${payload.slice(0, 200)}`;
      }

      return `Gateway request failed: ${JSON.stringify(payload).slice(0, 200)}`;
    }

    function formatValue(value) {
      if (value === null) return 'null';
      if (typeof value === 'object') {
        try {
          const json = JSON.stringify(value);
          return json.length > 60 ? `${json.slice(0, 57)}...` : json;
        } catch (err) {
          return '[object]';
        }
      }
      return String(value);
    }

    function buildFallbackMessage(profile) {
      const suggestions = [
        'Try asking for "status" to trigger a health check.'
      ];

      if (profile.type === 'vision') {
        suggestions.push('Mention an image or photo to get FastVLM usage instructions.');
      }

      if (profile.type === 'ollama') {
        suggestions.push('Ask to "list models" to discover the installed Ollama models.');
      }

      return [profile.tips, suggestions.join(' ')].filter(Boolean).join('\n');
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar
    }
  </script>
<script type="module">
  import { enhanceChatbotActions } from "/boss-ui/public/js/chatbot_actions.js";
  try { enhanceChatbotActions(window?.LUKA_CTX||{}); } catch(e){ console.error("chatbot_actions:", e); }
</script>
</body>
</html>

<div id="promptlib-toolbar" style="position:fixed;left:16px;top:16px;background:#0f1115;color:#eaeaea;padding:10px 12px;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,.35);font:13px system-ui;z-index:9999">
  <strong style="margin-right:8px">Prompt Library</strong>
  <select id="pl-select" style="margin-right:6px;max-width:240px">
    <option value="pt-small-safe-change">pt-small-safe-change</option>
    <option value="pt-audit-and-fix">pt-audit-and-fix</option>
    <option value="pt-codex-readiness">pt-codex-readiness</option>
  </select>
  <button id="pl-insert">Insert</button>
</div>
<script>
  (function(){
    const TEMPLATES={
      'pt-small-safe-change': 'Use 02LUKA CLC Reasoning v1.1... small, reversible change...',
      'pt-audit-and-fix': 'Audit: Drive runtime, LaunchAgents, denied paths... rank & fix...',
      'pt-codex-readiness': 'Run preflight → dev → smoke; write readiness report...'
    };
    const $=q=>document.querySelector(q);
    const insert=(t)=>{
      const v=TEMPLATES[t]||''; if(!v) return;
      const ta=document.querySelector('textarea, #chat-input, #prompt, [contenteditable=true]');
      if(ta){ if(ta.value!==undefined){ ta.value=v; } else { ta.textContent=v; } }
    };
    $('#pl-insert').addEventListener('click',()=>insert($('#pl-select').value));
  })();
</script>
