#!/usr/bin/env zsh
# == WO-CLS-0010 : Public Docs Publisher ==
# File: ~/02luka/tools/publish_doc.zsh
# Called by OCR consumer when action="publish"
set -euo pipefail
setopt NULL_GLOB EXTENDED_GLOB

ROOT="$HOME/02luka"
PUBLIC="$ROOT/public/docs"
ASSETS="$ROOT/public/assets"
LOG="$ROOT/g/logs/publish_doc.log"
TELEM="$ROOT/g/telemetry"

ts(){ date +'%Y-%m-%dT%H:%M:%S%z'; }
log(){ echo "[$(ts)] $*" | tee -a "$LOG"; }

# Validate input
if [[ $# -lt 1 ]]; then
  log "ERR: missing argument (usage: publish_doc.zsh <approval_json>)"
  exit 1
fi

JSON="$1"
if [[ ! -f "$JSON" ]]; then
  log "ERR: file not found: $JSON"
  exit 1
fi

# Extract metadata
WO_ID=$(jq -r '.wo_id // "unknown"' "$JSON")
APPROVED_BY=$(jq -r '.approved_by // "unknown"' "$JSON")
APPROVED_AT=$(jq -r '.approved_at // "unknown"' "$JSON")

log "START: publishing docs for $WO_ID"

# Process each file (avoid subshell to preserve counters)
PUBLISHED=0
FAILED=0

# Create temp file with file list
TMPLIST=$(mktemp)
jq -r '.files[]? | [.path,.sha256,.title // ""] | @tsv' "$JSON" 2>/dev/null > "$TMPLIST"

while IFS=$'\t' read -r fpath sha256 title; do
  if [[ ! -f "$fpath" ]]; then
    log "ERR: file not found: $fpath"
    : $(( FAILED++ ))
    continue
  fi

  # Verify SHA256
  have=$(shasum -a 256 "$fpath" | awk '{print $1}')
  if [[ "$have" != "$sha256" ]]; then
    log "ERR: sha256 mismatch for $fpath"
    : $(( FAILED++ ))
    continue
  fi

  fname=$(basename "$fpath")
  ext="${fname##*.}"

  case "$ext" in
    md|markdown)
      # Convert markdown to HTML
      html_name="${fname%.*}.html"
      output="$PUBLIC/$html_name"

      # Use pandoc with nice styling
      pandoc "$fpath" \
        -o "$output" \
        --standalone \
        --metadata title="${title:-$fname}" \
        --metadata date="$APPROVED_AT" \
        --metadata author="$APPROVED_BY" \
        --toc \
        --toc-depth=3 \
        --css="/assets/style.css" \
        2>/dev/null || {
          log "ERR: pandoc failed for $fpath"
          : $(( FAILED++ ))
          continue
        }

      log "OK: published $fname â†’ $html_name"
      : $(( PUBLISHED++ ))
      ;;

    jpg|jpeg|png|gif|svg|pdf)
      # Copy assets
      cp "$fpath" "$ASSETS/$fname"
      log "OK: copied asset $fname"
      : $(( PUBLISHED++ ))
      ;;

    *)
      log "WARN: unsupported file type: $ext ($fname)"
      ;;
  esac
done < "$TMPLIST"

rm -f "$TMPLIST"

# Generate index page
log "GENERATE: index page"

cat > "$PUBLIC/index.html" <<'INDEXEOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>02luka Documentation</title>
  <link rel="stylesheet" href="/assets/style.css">
</head>
<body>
  <header>
    <h1>02luka Documentation</h1>
    <p>Public documentation repository</p>
  </header>
  <main>
    <nav>
      <h2>Available Documents</h2>
      <ul id="doc-list">
INDEXEOF

# List all HTML files except index
for html in "$PUBLIC"/*.html(N); do
  [[ "$(basename "$html")" == "index.html" ]] && continue
  fname=$(basename "$html")
  title=$(grep -m1 '<title>' "$html" | sed 's/<[^>]*>//g' || echo "$fname")
  echo "        <li><a href=\"/$fname\">$title</a></li>" >> "$PUBLIC/index.html"
done

cat >> "$PUBLIC/index.html" <<'INDEXEOF2'
      </ul>
    </nav>
  </main>
  <footer>
    <p>Generated by 02luka Publishing System</p>
  </footer>
</body>
</html>
INDEXEOF2

# Create basic CSS if not exists
if [[ ! -f "$ASSETS/style.css" ]]; then
  cat > "$ASSETS/style.css" <<'CSSEOF'
:root {
  --primary: #2c3e50;
  --secondary: #3498db;
  --background: #ecf0f1;
  --text: #2c3e50;
  --border: #bdc3c7;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  line-height: 1.6;
  color: var(--text);
  background: var(--background);
  padding: 20px;
}

header {
  background: var(--primary);
  color: white;
  padding: 2rem;
  margin-bottom: 2rem;
  border-radius: 8px;
}

header h1 {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
}

main {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  max-width: 900px;
  margin: 0 auto;
}

nav ul {
  list-style: none;
}

nav li {
  padding: 0.75rem 0;
  border-bottom: 1px solid var(--border);
}

nav li:last-child {
  border-bottom: none;
}

nav a {
  color: var(--secondary);
  text-decoration: none;
  font-size: 1.1rem;
  transition: color 0.2s;
}

nav a:hover {
  color: var(--primary);
}

h1, h2, h3, h4, h5, h6 {
  margin: 1.5rem 0 1rem;
  color: var(--primary);
}

p {
  margin-bottom: 1rem;
}

code {
  background: #f4f4f4;
  padding: 2px 6px;
  border-radius: 3px;
  font-family: "Monaco", "Courier New", monospace;
}

pre {
  background: #f4f4f4;
  padding: 1rem;
  border-radius: 5px;
  overflow-x: auto;
  margin: 1rem 0;
}

pre code {
  background: none;
  padding: 0;
}

footer {
  text-align: center;
  margin-top: 2rem;
  color: #7f8c8d;
  font-size: 0.9rem;
}

#TOC {
  background: #f8f9fa;
  padding: 1rem;
  border-left: 4px solid var(--secondary);
  margin: 1rem 0;
}

#TOC ul {
  list-style: none;
}

#TOC a {
  color: var(--text);
  text-decoration: none;
}

#TOC a:hover {
  color: var(--secondary);
}
CSSEOF
  log "OK: created default stylesheet"
fi

# Telemetry
echo "{\"kind\":\"doc_publish\",\"wo_id\":\"$WO_ID\",\"published\":$PUBLISHED,\"failed\":$FAILED,\"who\":\"$APPROVED_BY\",\"when\":\"$(ts)\"}" >> "$TELEM/doc_publish_$(date +%Y%m%d).ndjson"

log "DONE: published=$PUBLISHED failed=$FAILED"
exit 0
