#!/bin/bash
# 02luka System Verification & Debug Script
# Checks deployment, services, and provides optimization report

echo "üîç 02LUKA SYSTEM VERIFICATION"
echo "=============================="
echo ""

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Path configuration
SOT_PATH="${SOT_PATH:-$HOME/My Drive (ittipong.c@gmail.com) (1)/02luka}"

# 1. DEPLOYMENT CHECK
echo "üì¶ 1. DEPLOYMENT STATUS"
echo "-----------------------"
DEPLOY_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://ic1558.github.io/02luka/")
if [ "$DEPLOY_STATUS" = "200" ]; then
    echo -e "${GREEN}‚úÖ GitHub Pages: LIVE${NC}"
    echo "   URL: https://ic1558.github.io/02luka/"

    # Check file size
    SIZE=$(curl -s "https://ic1558.github.io/02luka/" | wc -c)
    echo "   Size: $((SIZE/1024))KB"
else
    echo -e "${RED}‚ùå GitHub Pages: DOWN (HTTP $DEPLOY_STATUS)${NC}"
fi
echo ""

# 2. LOCAL SERVICES CHECK
echo "üñ•Ô∏è  2. LOCAL SERVICES"
echo "-------------------"

# MCP Docker
if curl -s http://127.0.0.1:5012/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ MCP Docker (5012): HEALTHY${NC}"
    HEALTH=$(curl -s http://127.0.0.1:5012/health | jq -r .status 2>/dev/null || echo "unknown")
    echo "   Status: $HEALTH"
else
    echo -e "${RED}‚ùå MCP Docker (5012): OFFLINE${NC}"
fi

# MCP FS
if lsof -iTCP:8765 -sTCP:LISTEN > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ MCP FS (8765): LISTENING${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  MCP FS (8765): NOT RUNNING${NC}"
fi

# Ollama
if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Ollama (11434): ACTIVE${NC}"
    MODELS=$(curl -s http://localhost:11434/api/tags | jq -r '.models | length' 2>/dev/null || echo "0")
    echo "   Models loaded: $MODELS"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Ollama (11434): OFFLINE${NC}"
fi
echo ""

# 3. DOCKER STATUS
echo "üê≥ 3. DOCKER CONTAINERS"
echo "---------------------"
if command -v docker &> /dev/null; then
    RUNNING=$(/Applications/Docker.app/Contents/Resources/bin/docker ps -q 2>/dev/null | wc -l | tr -d ' ')
    echo "   Running containers: $RUNNING"

    # List 02luka related containers
    /Applications/Docker.app/Contents/Resources/bin/docker ps --format "table {{.Names}}\t{{.Status}}" 2>/dev/null | grep -E "mary|lisa|kim|mcp|02luka" || echo "   No 02luka containers found"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker not available${NC}"
fi
echo ""

# 4. MCP SERVERS
echo "üîå 4. MCP SERVERS"
echo "----------------"
if [ -f "$SOT_PATH/g/tools/mcp_health.sh" ]; then
    MCP_HEALTH=$(bash "$SOT_PATH/g/tools/mcp_health.sh" json 2>/dev/null || echo '{"servers":[],"summary":{"total":0,"running":0,"failed":0}}')

    MCP_TOTAL=$(echo "$MCP_HEALTH" | jq -r '.summary.total')
    MCP_RUNNING=$(echo "$MCP_HEALTH" | jq -r '.summary.running')
    MCP_FAILED=$(echo "$MCP_HEALTH" | jq -r '.summary.failed')

    echo "$MCP_HEALTH" | jq -r '.servers[] |
        if .status == "running" then
            "‚úÖ \(.name): RUNNING (\(.server_info))"
        else
            "‚ùå \(.name): \(.status | ascii_upcase) - \(.error // "unknown error")"
        end' | while IFS= read -r line; do
            if [[ "$line" == ‚úÖ* ]]; then
                echo -e "${GREEN}$line${NC}"
            else
                echo -e "${RED}$line${NC}"
            fi
        done

    echo ""
    if [ "$MCP_RUNNING" -eq "$MCP_TOTAL" ]; then
        echo -e "${GREEN}Summary: $MCP_RUNNING/$MCP_TOTAL servers running${NC}"
    else
        echo -e "${YELLOW}Summary: $MCP_RUNNING/$MCP_TOTAL servers running ($MCP_FAILED failed)${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  MCP health checker not found${NC}"
    echo "   Install: $SOT_PATH/g/tools/mcp_health.sh"
    MCP_RUNNING=0
    MCP_TOTAL=4
fi
echo ""

# 5. SYSTEM MAP VALIDATION
echo "üó∫Ô∏è  5. SYSTEM MAP VALIDATION"
echo "--------------------------"
SOT_PATH="${SOT_PATH:-$HOME/My Drive (ittipong.c@gmail.com) (1)/02luka}"
if [ -f "$SOT_PATH/g/tools/check_map_links.sh" ]; then
    MAP_OUTPUT=$(bash "$SOT_PATH/g/tools/check_map_links.sh" 2>&1 | grep -v "lsof: WARNING")
    if echo "$MAP_OUTPUT" | grep -q "All checks passed"; then
        echo -e "${GREEN}‚úÖ System map: All paths and services validated${NC}"
    else
        ERROR_COUNT=$(echo "$MAP_OUTPUT" | grep -c "‚ùå ERROR")
        WARNING_COUNT=$(echo "$MAP_OUTPUT" | grep -c "‚ö†Ô∏è  WARNING")
        # Ensure counts are valid integers
        [[ "$ERROR_COUNT" =~ ^[0-9]+$ ]] || ERROR_COUNT=0
        [[ "$WARNING_COUNT" =~ ^[0-9]+$ ]] || WARNING_COUNT=0
        if [ "$ERROR_COUNT" -gt 0 ]; then
            echo -e "${RED}‚ùå System map: $ERROR_COUNT errors found${NC}"
        elif [ "$WARNING_COUNT" -gt 0 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  System map: $WARNING_COUNT warnings${NC}"
        fi
    fi

    # Auto-regenerate documentation
    if [ -f "$SOT_PATH/g/tools/render_system_map.py" ]; then
        python3 "$SOT_PATH/g/tools/render_system_map.py" >/dev/null 2>&1 && \
            echo "   Documentation auto-updated: docs/system_map.md"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  System map tools not found${NC}"
fi
echo ""

# 6. NETWORK DIAGNOSTICS
echo "üåê 6. NETWORK DIAGNOSTICS"
echo "------------------------"
echo "Local endpoints accessible from browser:"
if [ -f "luka.html" ]; then
    echo -e "${GREEN}‚úÖ luka.html exists ($(wc -l < luka.html) lines)${NC}"

    # Check for common issues
    if grep -q "getElementById.*input" luka.html && grep -q "getElementById.*send" luka.html; then
        echo -e "${GREEN}‚úÖ UI elements properly defined${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  UI elements may have issues${NC}"
    fi
else
    echo -e "${RED}‚ùå luka.html not found${NC}"
fi
echo ""

# 7. OPTIMIZATION REPORT
echo "‚ö° 7. OPTIMIZATION SUGGESTIONS"
echo "-----------------------------"

ISSUES=0

# Check if services are running
if ! curl -s http://127.0.0.1:5012/health > /dev/null 2>&1; then
    echo "‚Ä¢ Start MCP Docker: docker start 02luka-mcp"
    ((ISSUES++))
fi

if ! lsof -iTCP:8765 -sTCP:LISTEN > /dev/null 2>&1; then
    echo "‚Ä¢ Start MCP FS: ~/.local/bin/mcp_fs"
    ((ISSUES++))
fi

# Check file size
if [ -f "luka.html" ]; then
    HTML_SIZE=$(wc -c < luka.html)
    if [ $HTML_SIZE -gt 50000 ]; then
        echo "‚Ä¢ HTML file large (${HTML_SIZE} bytes) - consider minification"
        ((ISSUES++))
    fi
fi

if [ $ISSUES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ System optimized and ready!${NC}"
else
    echo -e "${YELLOW}Found $ISSUES optimization opportunities${NC}"
fi
echo ""

# 8. CODEX TEMPLATE INTEGRITY CHECK
echo "üìã 8. CODEX TEMPLATE INTEGRITY"
echo "------------------------------"

TPL="$SOT_PATH/.codex/templates/master_prompt.md"
EXPECTED_SHA="d177684c8ce1bb2f4cf49df3107dd884babdf731c4a5d639ffcd44aa5ee64532"

if [ -f "$TPL" ]; then
  ACTUAL_SHA="$(shasum -a 256 "$TPL" | awk '{print $1}')"
  if [ "$ACTUAL_SHA" != "$EXPECTED_SHA" ]; then
    echo -e "${RED}‚ùå master_prompt.md hash mismatch - template may have been modified${NC}"
    echo "       Expected: $EXPECTED_SHA"
    echo "       Actual:   $ACTUAL_SHA"
    echo "       Location: $TPL"
    echo "       ‚Üí Run 'g/tools/install_master_prompt.sh' to restore or update EXPECTED_SHA if intentional"
    ((ISSUES++))
  else
    echo -e "${GREEN}‚úÖ master_prompt.md hash verified - template integrity confirmed${NC}"
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è  master_prompt.md not found at $TPL${NC}"
  echo "       ‚Üí Run 'g/tools/install_master_prompt.sh' to install"
  ((ISSUES++))
fi
echo ""

# 9. BRIDGE WORKSPACE
echo "üåâ 9. BRIDGE WORKSPACE"
echo "----------------------"

BRIDGE_ROOT="f/bridge"
BRIDGE_OK=1

if [ -d "$BRIDGE_ROOT" ]; then
    for channel in inbox outbox processed; do
        path="$BRIDGE_ROOT/$channel"
        if [ -d "$path" ]; then
            echo -e "${GREEN}‚úÖ bridge/${channel}: ready at $path${NC}"
        else
            echo -e "${RED}‚ùå bridge/${channel}: missing directory (expected $path)${NC}"
            BRIDGE_OK=0
        fi
    done
else
    echo -e "${RED}‚ùå Bridge root missing: $BRIDGE_ROOT${NC}"
    BRIDGE_OK=0
fi

if [ $BRIDGE_OK -eq 1 ]; then
    echo "   Bridge is live. Mount or sync these folders on the host to move real files in/out."
else
    echo "   Fix the bridge directories to ensure the tunnel isn't just theoretical."
    ((ISSUES++))
fi
echo ""

# 10. QUICK ACTIONS
echo "üöÄ 10. QUICK ACTIONS"
echo "------------------"
echo "‚Ä¢ Run locally:     ./run_local.sh"
echo "‚Ä¢ Expose to web:   ./expose_gateways.sh"
echo "‚Ä¢ View on GitHub:  open https://ic1558.github.io/02luka/"
echo "‚Ä¢ Check logs:      tail -f /tmp/docker-autohealing.log"
echo ""

# 11. SYSTEM SUMMARY
echo "üìä 11. SUMMARY"
echo "----------"
TOTAL_CHECKS=10
PASSED=0

[ "$DEPLOY_STATUS" = "200" ] && ((PASSED++))
curl -s http://127.0.0.1:5012/health > /dev/null 2>&1 && ((PASSED++))
lsof -iTCP:8765 -sTCP:LISTEN > /dev/null 2>&1 && ((PASSED++))
curl -s http://localhost:11434/api/tags > /dev/null 2>&1 && ((PASSED++))
<<<<<<< HEAD
[ -f "index.html" ] && ((PASSED++))
[[ "${MCP_RUNNING:-0}" -gt 0 ]] && ((PASSED+=${MCP_RUNNING:-0}))
[ $BRIDGE_OK -eq 1 ] && ((PASSED++))
=======
[ -f "luka.html" ] && ((PASSED++))
>>>>>>> origin/codex/add-prompt-library-tool-to-top-bar

PERCENT=$((PASSED * 100 / TOTAL_CHECKS))

if [ $PERCENT -ge 80 ]; then
    echo -e "${GREEN}System Health: $PERCENT% ($PASSED/$TOTAL_CHECKS checks passed)${NC}"
elif [ $PERCENT -ge 60 ]; then
    echo -e "${YELLOW}System Health: $PERCENT% ($PASSED/$TOTAL_CHECKS checks passed)${NC}"
else
    echo -e "${RED}System Health: $PERCENT% ($PASSED/$TOTAL_CHECKS checks passed)${NC}"
fi

echo ""
echo "Verification complete at $(date '+%Y-%m-%d %H:%M:%S')"
